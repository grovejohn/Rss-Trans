<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Wed, 27 Mar 2024 16:39:28 GMT</lastBuildDate>
    <item>
      <title>榛名1.0.2</title>
      <link>https://haruna.kde.org/blog/2024-03-27-haruna-1.0.2/?utm_source=atom_feed</link>
      <description><![CDATA[Haruna 版本 1.0.2 已发布。
此版本中没有太多变化，因为重点是移植到 Qt6 和 KF6 以及代码重构。
一些 hwdec 选项已被删除，如果需要，可以在“自定义命令”下的设置中进行设置设置 hwdec解码方法名称并选择“启动时运行”。
您现在可以在 flathub 上获取它：

Windows 版本可以在此处找到。
其他软件包格式的可用性取决于您的发行版和打包 Haruna 的人员。
如果您喜欢 Haruna，请支持其开发：GitHub 赞助商 | Liberapay | PayPal
功能请求和错误应发布在 bugs.kde.org&lt; /a&gt;，但对于错误，请确保填写模板并提供尽可能多的信息。
&lt;小时/&gt;
变更日志：
1.0.2
特点：

从播放列表中打开项目的速度更快
如果最大最近文件数设置设为零，则最近文件将从配置文件中删除

错误修复：

通过打开文件操作打开文件时未播放该文件
从播放列表标题打开播放列表文件没有执行任何操作
隐藏/显示播放列表工具栏设置不起作用
音频和字幕全局菜单中的轨道子菜单为空
打开汉堡菜单时冻结
]]></description>
      <guid>https://haruna.kde.org/blog/2024-03-27-haruna-1.0.2/?utm_source=atom_feed</guid>
      <pubDate>Wed, 27 Mar 2024 11:00:00 GMT</pubDate>
    </item>
    <item>
      <title>KTextAddons 1.5.4</title>
      <link>https://blogs.kde.org/2024/03/27/ktextaddons-1.5.4/?utm_source=atom_feed</link>
      <description><![CDATA[KTextAddons 1.5.4 是我们的文本显示和处理库的错误修复版本
它修复了两个值得注意的错误并更新了翻译
修复错误 484328：Kmail 配置对话框需要大约 40 秒才能显示使用 QListView::clicked（在表情符号弹出菜单中）URL：https://download。]]></description>
      <guid>https://blogs.kde.org/2024/03/27/ktextaddons-1.5.4/?utm_source=atom_feed</guid>
      <pubDate>Wed, 27 Mar 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>自由软件智慧</title>
      <link>https://pointieststick.com/2024/03/26/free-software-wisdom/?utm_source=atom_feed</link>
      <description><![CDATA[资深 KDE 贡献者 Kevin Ottens 每周都会在他的博客上发布一堆发人深省的链接，并且 &lt; a href=&quot;https://ervin.ipsquad.net/blog/2024/03/15/web-review-week-2024-11/&quot; target=&quot;_blank&quot;&gt;上周的帖子包含一个我觉得特别有启发性的内容：
40 年编程经验
这是由一位名叫 Lars Wirzenius 的人撰写的智慧集，他几十年前开始了他的软件开发生涯，并且见证了这一切。虽然我没有 40 年的编程经验，但我在编程、QA、发布工程和管理方面确实有 16 年的经验，Lars 写的所有内容对我来说都是真实的。我鼓励大家读一读！
以下是我最喜欢的要点：

照顾好自己，否则你对别人没有好处。
有用的软件太大，无法单独创建，因此您最重要的技能是协作能力。
编写任何人都可以理解的穴居人代码，除非复杂性可以通过可衡量且一致的更好性能来证明是合理的。
分小块进行工作，然后重复。
观点的多样性很重要，否则您最终会意外地做出只适合一小部分人的东西。
了解目标用户是谁，并尝试从他们的角度看问题。
开发软件具有政治性。处理它。
学习写作，并把东西写下来。

但是请查看整个事情！]]></description>
      <guid>https://pointieststick.com/2024/03/26/free-software-wisdom/?utm_source=atom_feed</guid>
      <pubDate>Tue, 26 Mar 2024 21:35:32 GMT</pubDate>
    </item>
    <item>
      <title>生成式人工智能时代的软件工程培训</title>
      <link>https://ervin.ipsquad.net/blog/2024/03/26/software-engineering-training-in-the-age-of-generative-ai/?utm_source=atom_feed</link>
      <description><![CDATA[这是我也为 enioka 博客写的一篇文章，所以有一个 法语版本可用。

&lt;小时/&gt;

在enioka Haute Couture，我们开始提供培训不久前。
秉承我们的 DNA，我们专注于软件工程实践，而不是
给定的工具、框架或 API。这就是为什么我们开设软件等主题的课程
架构、重构、处理遗留代码、测试驱动开发（TDD）、
代码审查等等。
此外，并非每个团队都有相同的需求。有些人更喜欢在训练期间度过几天密集的时光
在一周内，其他人更喜欢在较长时间内进行较小的会议。这就是为什么我们的
课程设计灵活。它们可以定制以构建多日
会议，或一直到许多一小时的知识构建会议。
希望这一切对你来说听起来很棒（当然对我来说听起来很棒）。所以为什么
现在谈论这个？这是某种广告噱头吗？嗯……不是真的。
你看，在我们进行培训时发生了一些事情。快三年了
之前 GitHub 发布了 GitHub Copilot。当时这只是一个技术预览。
从那时起，大型语言模型（LLM）领域就开始了一场军备竞赛。
不管你喜欢与否，生成式人工智能将会继续存在，并且基于这种人工智能的代码助理
模型的使用越来越多。
我不是那些声称此类模特和助理即将消失的末日论者之一
接管我们的工作。同样，我不认为他们会加倍
开发人员的日常生产力。尽管如此，它们必然会影响我们的工作方式
以及生成的代码。因此，关注开发实践，我就更少了
担心开发人员工作岗位消失，更担心工资下降
生成的代码的质量。
事实上，早期研究表明，代码助手在引入时
未经检查的方式往往会降低代码质量并且往往增加
引入的安全问题数量。有趣的是主要因素
突出显示的是行为。这意味着在等待神奇的新产品之前
可以完美编码的助手（剧透：这不会发生），我们应该宁愿
改进我们引入和使用这些工具的方式。
这让我回到了[enioka 高级时装培训]。在这个新时代，
我们必须在培训期间感谢编码助理。这充满了所有
我之前提到的话题。现在我们所有的软件都有一个棘手的问题
开发实践：编码助理什么时候是适合这项工作的工具？
如果您正在练习 TDD 或尝试提高对它的使用，这是一个好的选择吗？
想让编码助理为您编写测试吗？也许不是……因为它是
当你做出重要的设计决策时，你可能想继续掌舵。
可能会派上用场来生成必须通过测试的代码。
如果您正在处理需要现代化的遗留代码库，为此
编码助手会让你更快地完成这个过程吗？更新代码
到新版本的语言或依赖项？提取更清晰的模块
和功能？编写批准测试来确保所有这些？
这样的问题还有很多……您可以与我们一起探索答案
在我们的一次培训课程中。我们将继续讨论 TDD、遗留代码……
有点扭曲！
当然，就像任何其他工具一样，我们提议的并不是特定于
给定的解决方案。你使用 GitHub Copilot 吗？科迪姆？具体的内部微调
模型？这可以。我们将在培训期间考虑到这一点以适应
尽可能多地向所涉及的开发人员及其上下文提供信息。
如果您想进一步讨论此问题，请随时与我们联系。]]></description>
      <guid>https://ervin.ipsquad.net/blog/2024/03/26/software-engineering-training-in-the-age-of-generative-ai/?utm_source=atom_feed</guid>
      <pubDate>Tue, 26 Mar 2024 13:48:08 GMT</pubDate>
    </item>
    <item>
      <title>KDE Plasma 6.0.3，三月份发布错误修复</title>
      <link>https://kde.org/announcements/plasma/6/6.0.3/?utm_source=atom_feed</link>
      <description><![CDATA[2024 年 3 月 26 日，星期二。今天 KDE 发布了 KDE Plasma 6 版本 6.0.3 的错误修复更新。

此版本添加了 KDE 贡献者为期两周的新翻译和修复。错误修复通常很小但很重要，包括：

系统监视器：Colorgrid：使用与饼图/条形图相同的背景颜色。 提交。修复错误#482664
Plasma SDK：修复图标资源管理器的桌面文件名。 提交。
Startplasma：使用启动声音的声音主题设置。 提交。

查看完整变更日志]]></description>
      <guid>https://kde.org/announcements/plasma/6/6.0.3/?utm_source=atom_feed</guid>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Plasma 5：早年</title>
      <link>https://blog.broulik.de/2024/03/plasma-5-the-early-years/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://blog.broulik.de/2024/03/plasma-5-the-early-years/?utm_source=atom_feed</guid>
      <pubDate>Mon, 25 Mar 2024 18:09:22 GMT</pubDate>
    </item>
    <item>
      <title>Tellico 3.5.4 发布</title>
      <link>https://tellico-project.org/tellico-3-5-4-released/?utm_source=atom_feed</link>
      <description><![CDATA[Tellico 3.5.4 现已推出，并进行了一些修复。
改进和错误修复

修复了从配置对话框打开帮助的错误（错误 479591）。 
更新了开放库源代码以搜索漫画（错误 479506）。&lt; /里&gt;
修复了过滤器对话框按钮的错误（错误 479771）。
修复了条目状态的显示错误（错误 479843）。
修复了更改组字段后条目选择的错误（错误 480297）。 
修复了带有标题重音符号的 DVDFr 搜索。
更新了 FilmAffinity 数据源。
]]></description>
      <guid>https://tellico-project.org/tellico-3-5-4-released/?utm_source=atom_feed</guid>
      <pubDate>Sat, 23 Mar 2024 17:52:02 GMT</pubDate>
    </item>
    <item>
      <title>使用 QML 语言服务器进行 KDE 开发</title>
      <link>https://nicolasfella.de/posts/qmlls-for-kde-development/?utm_source=atom_feed?utm_source=atom_feed</link>
      <description><![CDATA[Qt 提供 qmlls 一段时间了，它是 QML 的语言服务器协议实现。这允许流行的文本编辑器（如 Kate）（以及一些不太知名的编辑器（如 Visual Studio Code））使用 QML 代码，而无需为其编写专门的支持。
自然很多人都渴望用它来破解 KDE 代码。当尝试这样做时，您可能会遇到一些挫折，因为事情没有按预期进行。那么那里发生了什么，我们怎样才能让它发挥作用呢？
首先必须提到的是，qmlls 仍在大力开发中。您缺少许多一些东西 ；期望实现功能齐全的 LSP。如果您遇到看似应该有效但实际上无效的情况，请立即提交错误报告。 
那么如何使用 qmlls 呢？在 Kate 中，打开 QML 文件时应该立即激活它。如果这不起作用，您可能需要调整 LSP 客户端设置。对于其他编辑器，请查阅他们的文档，了解如何启用 LSP 支持。
在 KDE 代码上使用 qmlls 时可能会遇到的一个问题是它无法找到 KDE 提供的 QML 模块（例如 Kirigami）。当模块安装到例如计算机中时，就会发生这种情况。 ~/kde/usr，Qt 不会搜索该目录。解决这个问题的一种方法是构建你自己的 Qt 并将其安装到 ~/kde/usr 中，因为这样模块将被安装到与 Qt 相同的前缀中，并且 Qt 会找到它们。虽然构建自己的 Qt 是一件值得做的事情，但总的来说，这并不是一个非常令人满意的解决方案。我希望我们能尽快找到更好的解决方案。请参阅此处获取相关错误报告。
如果您的安装设置为 qmlls 可以找到 KDE 提供的模块，您可能仍然会遇到未知模块或类型的警告。为了让 qmlls 显示模块的信息，该模块需要一个 qmltypes 文件。这些文件提供有关模块公开的类型的机器可读信息。使这些可用的最简单方法是将模块移植到 ecm_add_qml_module 并声明类型注册。许多 KDE 模块已完成此操作，但仍有许多模块缺失。非常欢迎提供帮助！不明显的是，为了使工具正常工作，需要通过 ecm_add_qml_module 中的 DEPENDENCIES 参数明确标记模块依赖项。
如果正确找到所有模块和类型，您仍然会遇到一些警告，但其中大多数应该对应于实际问题和非最佳实践，例如使用不合格的属性查找和上下文属性。 qmlls 是一个很好的工具，可以指导您解决这些问题，从而实现代码现代化和优化。然而，对于某些类型的警告，我们还没有适当的解决方案：

我们的翻译函数 i18n 和其他函数被 qmllint/qmlls 视为不合格的查找。这是因为它们在运行时神奇地注入到引擎中。目前还不清楚这个问题的解决方案是什么样的。
编写 KCM 时，我们通过 kcm 上下文属性公开模块的 C++ 类，该属性对工具来说是不透明的。需要采取不同的方法。

尽管当前存在限制，假设项目设置正确，qmlls 已经是处理 QML 代码的非常有用的工具。
QML 黑客快乐！]]></description>
      <guid>https://nicolasfella.de/posts/qmlls-for-kde-development/?utm_source=atom_feed?utm_source=atom_feed</guid>
      <pubDate>Sat, 23 Mar 2024 13:00:00 GMT</pubDate>
    </item>
    <item>
      <title>本周 KDE</title>
      <link>https://pointieststick.com/2024/03/22/this-week-in-kde-4/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://pointieststick.com/2024/03/22/this-week-in-kde-4/?utm_source=atom_feed</guid>
      <pubDate>Sat, 23 Mar 2024 05:24:14 GMT</pubDate>
    </item>
    <item>
      <title>网络评论，2024-12 周</title>
      <link>https://ervin.ipsquad.net/blog/2024/03/22/web-review-week-2024-12/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://ervin.ipsquad.net/blog/2024/03/22/web-review-week-2024-12/?utm_source=atom_feed</guid>
      <pubDate>Fri, 22 Mar 2024 11:59:28 GMT</pubDate>
    </item>
    </channel>
</rss>