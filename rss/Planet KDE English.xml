<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Thu, 27 Jun 2024 16:40:57 GMT</lastBuildDate>
    <item>
      <title>Qt Creator 14 Beta2 发布</title>
      <link>https://www.qt.io/blog/qt-creator-14-beta2-released?utm_source=atom_feed</link>
      <description><![CDATA[我们很高兴地宣布 Qt Creator 14 Beta2 正式发布！
]]></description>
      <guid>https://www.qt.io/blog/qt-creator-14-beta2-released?utm_source=atom_feed</guid>
      <pubDate>Thu, 27 Jun 2024 10:34:48 GMT</pubDate>
    </item>
    <item>
      <title>更智能的 Rust 方式</title>
      <link>https://www.kdab.com/the-smarter-way-to-rust/?utm_source=atom_feed</link>
      <description><![CDATA[如果您一直在关注我们的博客，您可能已经意识到 Rust 在嵌入式系统中的影响力越来越大。虽然 Rust 在安全设计方面表现出色，但它也经常与 C++ 集成。这种战略方法充分利用了两种语言的优势，包括多年来在复杂嵌入式系统中磨练出的大量 C++ 功能。让我们深入研究集成 Rust 和 C++ 的一些关键概念。
将 Rust 添加到 C++
如果您要将 Rust 添加到现有的 C++ 项目中，则需要从正确的地方开始。首先氧化（即将代码转换为 Rust）容易出现错误、难以维护或存在安全漏洞的区域。这些是 Rust 可以提供即时改进的地方。专注于自包含、具有干净接口且主要为程序而非面向对象的模块。例如，处理媒体或图像处理的库可能是用 Rust 重写的主要候选者，因为这些库通常容易受到内存安全问题的影响。解析器和输入处理例程也将受益于 Rust 的安全保证。
决定从外到内还是从内到外使用 Rust
随着项目规模的扩大，请权衡使用 Rust 组件维护 C++ 核心与使用 C++ 库维护以 Rust 为中心的应用程序的优点。对于规模较小、较新的项目，从 Rust 开始可能有助于您避免处理 C 外部函数接口 (FFI) 的复杂性。此决定可能取决于您的安全优先级：如果您的项目的核心租户是安全，那么以 Rust 为中心的方法可能更可取。相反，如果仅在 C++ 项目的某些领域需要安全，则将核心保留在 C++ 中可能更实用。
另一个考虑因素是您的项目如何处理多线程。在 Rust 和 C++ 之间混合线程和内存所有权非常复杂，并且容易出错。根据应用程序使用线程的方式，这可能会使决策倾向于选择 C++ 或 Rust 作为主要“主机”应用程序。
让 C++ 发挥其优势
虽然 Rust 具有许多优势，特别是在安全性方面，但 C++ 也有其自身的优点，不应草率地否定。重写决定应具有战略性，基于实际需求而不是追求语言纯度，因为通过重写经过充分测试和稳定的 C++ 代码引入新错误的风险超过了 Rust 重写的好处。经过时间考验的 C++ 代码，特别是在信号处理或加密等领域，最好保持原样。这样的代码通常经过高度优化、稳定，并且不易出现与内存相关的问题。俗话说，如果它没有坏，就不要“修复”它。
克服 Rust 的局限性
尽管 Rust 的生态系统正在不断发展，但它仍然相对年轻。依赖小团队或个人维护的软件包具有固有风险。此外，由于 Rust 仍处于语言快速发展的时期，这可能会导致频繁更新，对大型或长期项目构成挑战。在某些情况下，例如非常大的代码库、特定的嵌入式支持要求或开发周期较长的项目，C++ 可能仍然是更实用的选择。在稳定性和寿命很重要的地方使用 C++ 是明智的，在安全性至关重要但可以接受一定程度的开发流动性的地方使用 Rust 是明智的。
摘要
通过将 C++ 的可靠性与 Rust 的安全性相结合，开发人员可以设计持久的系统，同时最大限度地降低常见编程陷阱的风险。如果您有兴趣阅读更多关于此主题的内容，您可以阅读我们关于Rust/C++ 集成的最佳实践指南，该指南由我们与Ferrous System联合创始人 Florian Gilcher 合作创建。

关于 KDAB

如果您喜欢这篇文章并想阅读类似的材料，请考虑通过我们的 RSS 源订阅。
订阅KDAB TV 提供类似的信息性短视频内容。 
KDAB 提供市场领先的软件咨询和开发服务以及 Qt、C++ 和 3D/OpenGL 方面的培训。 联系我们。

 
文章更智能的 Rust 之路首先出现在KDAB上。]]></description>
      <guid>https://www.kdab.com/the-smarter-way-to-rust/?utm_source=atom_feed</guid>
      <pubDate>Thu, 27 Jun 2024 08:00:04 GMT</pubDate>
    </item>
    <item>
      <title>剪纸插件 1.3.0</title>
      <link>https://carlschwan.eu/2024/06/26/kirigami-addons-1.3.0/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://carlschwan.eu/2024/06/26/kirigami-addons-1.3.0/?utm_source=atom_feed</guid>
      <pubDate>Wed, 26 Jun 2024 11:20:35 GMT</pubDate>
    </item>
    <item>
      <title>Hash-o-Matic 1.0.1</title>
      <link>https://carlschwan.eu/2024/06/25/hash-o-matic-1.0.1/?utm_source=atom_feed</link>
      <description><![CDATA[Hash-o-Matic 1.0.1 已发布！Hash-o-Matic 是一款用于比较和生成文件校验和以验证其真实性的工具。它还通过使用 PGP 签名来验证文件。
Hash-o-Matic 的这个新版本提供了更新的翻译和一些小的视觉变化。在后台，应用程序被移植到新的 QML
类型注册，我们现在支持在 Haiku 上构建 Hash-o-Matic，并且我们现在
需要 KDE Frameworks 的发布版本，而不是预发布版本。
Packager Section
您可以在
download.kde.org
找到该软件包，并且它已使用我的GPG 密钥签名。]]></description>
      <guid>https://carlschwan.eu/2024/06/25/hash-o-matic-1.0.1/?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 10:10:35 GMT</pubDate>
    </item>
    <item>
      <title>了解如何使用 Squish 自动化 GUI 测试：Qt Academy 上的免费课程</title>
      <link>https://www.qt.io/blog/learn-how-to-automate-gui-testing-with-squish-free-courses-on-qt-academy?utm_source=atom_feed</link>
      <description><![CDATA[
  

Qt Academy 是学习 Qt 框架和工具的免费在线平台，不断更新新内容。我们的新学习路径由 9 门课程组成，专为 Squish 设计，为对自动化 GUI 测试感兴趣的人提供了理想的基础。此路径由 Qt 的客户成功工程师团队创建，提供了掌握 Squish 的全面指南，并将为您提供轻松入门所需的所有技能。 
]]></description>
      <guid>https://www.qt.io/blog/learn-how-to-automate-gui-testing-with-squish-free-courses-on-qt-academy?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 09:03:37 GMT</pubDate>
    </item>
    <item>
      <title>Plasma 6.1 中的 KRdp</title>
      <link>https://quantumproductions.info/articles/2024-06/krdp-plasma-61?utm_source=atom_feed</link>
      <description><![CDATA[Plasma 6.1 中的 KRdp
我很久没有发布关于 KRdp 的帖子了。对于那些错过的人，KRdp
实现了一个服务器，该服务器公开正在运行的 Plasma 会话，以便通过 RDP 协议由
其他机器控制。
这里最大的新闻是 KRdp 现在是 Plasma 的一部分，并将与 Plasma 6.1 的其余部分一起发布。最初我们希望能够将其包含在 Plasma 6.0 中，但由于为 Plasma 6.0 准备其他一切的工作量很大，我们决定推迟将其纳入 Plasma 6.1。这使我们能够
纳入一些我们想要纳入的相当重要的更改。
新增功能
Plasma 6.1 中最重要的更改之一是，现在系统设置中有一个 KCM 来配置远程桌面支持：


Image





系统设置中的新远程桌面页面。
这消除了手动设置的需要，应该使入门变得简单得多。这还增加了对多个用户登录的支持。这项工作主要由 Akseli Lahtinen 完成，他已经接管了 KRdp 的更多一般开发工作。
我们还对用于视频编码的底层库进行了大量的工作，以提高编码速度并减少延迟。这意味着，即使使用软件编码和较慢的客户端，即使视频质量可能会有所下降，事情也应该保持相当的响应速度。
虚拟会话支持
经常被问到的一件事是 KRdp 是否允许远程用户在没有当前正在运行的会话的情况下登录。不幸的是，目前不支持此功能，并且没有明确的路线图说明何时会支持此功能。远程登录需要相当多的额外基础设施才能完全工作，不仅在 Plasma 中，而且在其他项目中也是如此。
如果您认为这对您来说是一个重要的用例，并且您有能力处理这样的事情，请随时与我们联系以讨论。
最终，让对用例充满热情的人来处理它将确保事情更快地得到开发。请参阅 KDE 社区 wiki 上的参与页面，了解如何开始。对于 KRdp 特定的问题，请随时在
#plasma on Matrix 中提问。
在 KDE 讨论 上讨论此帖子

ahiemstra
2024 年 6 月 25 日星期二 - 10:45]]></description>
      <guid>https://quantumproductions.info/articles/2024-06/krdp-plasma-61?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 08:45:23 GMT</pubDate>
    </item>
    <item>
      <title>Tellico 3.5.5 发布</title>
      <link>https://tellico-project.org/tellico-3-5-5-released/?utm_source=atom_feed</link>
      <description><![CDATA[Tellico 3.5.5 现已发布，并进行了一些重要修复。
改进和错误修复

修复了 XSLT 文件加载问题，使其能够与 libxml2 &gt;= 2.13 一起正确运行（错误 488707）。
修复了显示大内容条目的错误（错误 487079）。
改进了 SRU 获取器，允许用户定义搜索索引（Bug 488931）。
]]></description>
      <guid>https://tellico-project.org/tellico-3-5-5-released/?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 01:39:41 GMT</pubDate>
    </item>
    <item>
      <title>修复 KWin 在旧硬件上的性能</title>
      <link>https://zamundaaa.github.io/wayland/2024/06/25/fixing-kwin-perf-on-old-hardware.html?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://zamundaaa.github.io/wayland/2024/06/25/fixing-kwin-perf-on-old-hardware.html?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>KDE Plasma 6.1.1，6 月份错误修复版本</title>
      <link>https://kde.org/announcements/plasma/6/6.1.1/?utm_source=atom_feed</link>
      <description><![CDATA[2024 年 6 月 25 日，星期二。今天，KDE 发布了 KDE Plasma 6 的错误修复更新，版本号为 6.1.1。
Plasma 6.1 于 2024 年 6 月发布，包含许多功能改进和新模块，以完善桌面体验。
此版本添加了 KDE 贡献者一周的新翻译和修复。这些错误修复通常很小但很重要，包括：

KScreenLocker Greeter：修复 Shader Wallpaper 插件以及可能的其他插件。 提交。
将最低 Plasma Wayland 协议版本提高至 1.13。提交。
在仅支持 snap 的发行版上使用 snap:// URL，而不是 appstream:// URL。 提交。

查看完整更新日志]]></description>
      <guid>https://kde.org/announcements/plasma/6/6.1.1/?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>提交1.6.0</title>
      <link>https://blogs.kde.org/2024/06/25/kommit-1.6.0/?utm_source=atom_feed</link>
      <description><![CDATA[Kommit 1.6.0 是我们 Git repo 应用程序的一个功能和错误修复版本，现在可以使用 Q 5 或 6 进行构建。
改进：

在 Windows 上构建时无需 kdbusaddons
添加 flatpak 支持
修复显示日期（使用 QLocale）
修复内存泄漏
在 qt6 中重新激活外部应用程序中的打开文件
在报告图表小部件中添加缩放支持
在报告页面中用 QTreeWidget 替换 QTableWidget
修复未打开 git 存储库时崩溃的问题
修复 Windows 上的加载样式/图标（KF &gt;= 6.3）
实现 gravatar 缓存
修复i18n

URL： https://download.kde.org/stable/kommit
来源： kommit-1.6.0.tar.xz
SHA256： 4091126316ab0cd2d4a131facd3cd8fc8c659f348103b852db8b6d1fd4f164e2
签名人： E0A3EB202F8E57528E13E72FD7574483BB57B18D Jonathan Esk-Riddell jr@jriddell.org
https://jriddell.org/esk-riddell.gpg]]></description>
      <guid>https://blogs.kde.org/2024/06/25/kommit-1.6.0/?utm_source=atom_feed</guid>
      <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    </channel>
</rss>