<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里 |英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Sat, 24 Aug 2024 04:37:28 GMT</lastBuildDate>
    <item>
      <title>本周 KDE：每个显示器的亮度控制和“更新然后关闭”</title>
      <link>https://pointieststick.com/2024/08/23/this-week-in-kde-per-monitor-brightness-control-and-update-then-shut-down/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://pointieststick.com/2024/08/23/this-week-in-kde-per-monitor-brightness-control-and-update-then-shut-down/?utm_source=atom_feed</guid>
      <pubDate>Sat, 24 Aug 2024 02:28:06 GMT</pubDate>
    </item>
    <item>
      <title>网络评论，第 2024-34 周</title>
      <link>https://ervin.ipsquad.net/blog/2024/08/23/web-review-week-2024-34/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://ervin.ipsquad.net/blog/2024/08/23/web-review-week-2024-34/?utm_source=atom_feed</guid>
      <pubDate>Fri, 23 Aug 2024 20:37:50 GMT</pubDate>
    </item>
    <item>
      <title>KDE 中的指标 — 它们有用吗？</title>
      <link>http://blog.davidedmundson.co.uk/blog/metrics-in-kde-are-they-useful/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>http://blog.davidedmundson.co.uk/blog/metrics-in-kde-are-they-useful/?utm_source=atom_feed</guid>
      <pubDate>Fri, 23 Aug 2024 09:00:50 GMT</pubDate>
    </item>
    <item>
      <title>GSoC 2024：总结</title>
      <link>https://joaotgouveia.com/blog/gsoc-2024-wrapping-up?utm_source=atom_feed</link>
      <description><![CDATA[最终产品
整个夏天，我开发了一个名为 MankalaEngine 的 C++ 库，为 Bohnenspiel 和 Oware 游戏实现了三个对手。
当前的库具有高度可扩展性。在实现所有基类和 Bohnenspiel 之后，将 Oware 添加到库中相当快速和直接。从项目开始以来，对可扩展性的关注一直是优先事项。鉴于 Mancala 系列游戏包含许多变体，考虑到这一点来设计 API 已被证明是有价值的。
提供的三个对手使用随机选择算法、Minimax 和 MTD-f。 Minimax 和 MTD-f 对手通过 alpha-beta 修剪和转置表等优化实现，使它们都非常强大，并且始终优于随机对手。
为了更详细地概述所取得的成就，我在 KDE 的 wiki 上撰写了一份
工作报告。
我学到了什么
从技术角度来看，过去几个月是一段非常丰富的经历。
为“现实世界”项目做出贡献让我学到了以前没有使用过的技术。例如，我学习了如何使用 CMake 以及如何设置 CI 管道。
我还面临着在开发学校或个人项目时通常不会出现的问题，例如遵守组织的软件标准。为此，我了解了开源许可证和新的编程习惯用法。
与社区互动
由于 MankalaEngine 是一个全新的库，我与社区的互动有限，因为这个特定项目没有现有的贡献者群体。
我主要与我的导师互动，他们非常乐于助人。虽然不太频繁，但我也有机会通过邮件列表与其他 KDE 贡献者交流，从他们那里我也学到了很多东西。]]></description>
      <guid>https://joaotgouveia.com/blog/gsoc-2024-wrapping-up?utm_source=atom_feed</guid>
      <pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>GSoC '24 进展：第 9 至第 12 周</title>
      <link>https://seri037.github.io/blog/posts/development/5/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://seri037.github.io/blog/posts/development/5/?utm_source=atom_feed</guid>
      <pubDate>Thu, 22 Aug 2024 15:30:00 GMT</pubDate>
    </item>
    <item>
      <title>实现音频混音器，第一部分</title>
      <link>https://www.kdab.com/implementing-an-audio-mixer-part-1/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://www.kdab.com/implementing-an-audio-mixer-part-1/?utm_source=atom_feed</guid>
      <pubDate>Thu, 22 Aug 2024 07:00:59 GMT</pubDate>
    </item>
    <item>
      <title>哪里 ⚙️ 齿轮 24.08</title>
      <link>https://kde.org/announcements/gear/24.08.0/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://kde.org/announcements/gear/24.08.0/?utm_source=atom_feed</guid>
      <pubDate>Thu, 22 Aug 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>等离子速成课程 - KCrash</title>
      <link>https://kde.haraldsitter.eu/posts/plasma-crash-course-kcrash/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://kde.haraldsitter.eu/posts/plasma-crash-course-kcrash/?utm_source=atom_feed</guid>
      <pubDate>Tue, 20 Aug 2024 16:42:58 GMT</pubDate>
    </item>
    <item>
      <title>消息传递 API（SIMPL）</title>
      <link>https://euroquis.nl//blabla/2024/08/20/simpl.html?utm_source=atom_feed</link>
      <description><![CDATA[在 KDE 世界中，有一个著名的周末，DCOP（桌面通信对象协议）诞生了，为 KParts 之类的东西奠定了基础。GNOME 选择了 CORBA 对象模型，而后来，自由桌面世界决定使用 DBus 作为消息传递 API。但即使在当时，也有其他消息传递 API。在工作中，我使用一个名为 SIMPL 的消息传递 API，这有点像 90 年代后期 DCOP 的呼喊。

请注意，我对“历史”的介绍只是我现在记得的 15 年前已经是“篝火旁讲的故事”的事件。
欢迎更正（通过电子邮件）。

在工作中，SIMPL 是既定事实，它有包装器和抽象，因此有一个不错的 C++ 风格 API 围绕着它。其核心是
点对点消息传递 API，完全没有关于消息负载的策略。这既是一种祝福——没有策略意味着它可以
用于您认为必要的任何类型的消息——也是一种诅咒——没有策略意味着您最终会编写一堆抽象来
表示您实际使用的消息。
包装在 C++ 级别的代码看起来像这样（有效地掩盖了
底层传输）：
auto reply = CoordinatorTask().Send(requests::GetCurrentUser());
if(reply.has_value()) {
do_something(reply.value().username); ...

网上似乎没有太多关于 SIMPL 的内容了。
2000 年有一篇 LinuxDevices 文章，当时 SIMPL 作为一个开源项目正在积极开发中
2015 年有一篇 LWN 评论 仍然提到它，还有一篇 维基百科文章 作为历史记录。请注意，维基百科上的网站链接指向现在的垃圾邮件域。我再也无法快速找到资源了。
我确实想知道，当时的桌面开发人员是否完全错过了这种现有的消息传递机制——也许 SIMPL 的作者过于专注于工业自动化，在 X11 桌面空间中看不到，在当时进行了大量 KDE 开发的 SunOS 和其他平台上也看不到。
SIMPL 库开发人员在文档中反复强调的一件事（有一本书）是做一件事并做好的理念。因此，序列化和消息有效负载不是其中的一部分——没有政策。因此，安全性和访问控制不是他的政策的一部分。

这些问题可以放在 SIMPL 之上的不同 API 层中。
SIMPL 作者强调的另一件事是只做一件事，并做好它。这尤其适用于使用 SIMPL 的应用程序。

在库的深处，这意味着只能为应用程序注册一个名称（为了发现还有哪些其他应用程序，每个应用程序在系统中都有一个唯一的名称）。

由于使用全局状态，这会导致线程安全性不足。

这会导致无上下文的 API，因此应用程序所能做的就是调用“给我下一条传入消息”。没有事件循环的概念，
也没有明显的机制将 SIMPL 消息处理集成到另一个事件循环（如 X11 循环）中。
对我个人而言，这意味着我需要在往返于家和工作之间的途中重新调整我的大脑，将围绕 DBus 的 Qt 包装器切换到围绕 SIMPL 的工作包装器，以及两者的微妙之处。
实际上，这意味着大部分时间都在诅咒 QtDBus（因为我在两者上投入的时间相对较多）。]]></description>
      <guid>https://euroquis.nl//blabla/2024/08/20/simpl.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 19 Aug 2024 22:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Qt Quick Effect Maker：Qt 6.8 中的新功能</title>
      <link>https://www.qt.io/blog/qt-quick-effect-maker-whats-new-in-qt-6.8?utm_source=atom_feed</link>
      <description><![CDATA[
  

由于 Qt 6.8 Beta 3 上周发布，现在正是讨论 Qt 6.8 版本新功能的好时机。这篇博文介绍了其中一项新功能，即 Qt Quick Effect Maker 中提供的新效果节点。还包括使用所有这些效果的示例应用程序。
]]></description>
      <guid>https://www.qt.io/blog/qt-quick-effect-maker-whats-new-in-qt-6.8?utm_source=atom_feed</guid>
      <pubDate>Mon, 19 Aug 2024 10:35:43 GMT</pubDate>
    </item>
    </channel>
</rss>