<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Tue, 11 Jun 2024 00:59:42 GMT</lastBuildDate>
    <item>
      <title>需要帮助！将 KDE 框架 oss-fuzz 版本移植到 Qt6/KF6</title>
      <link>https://tsdgeos.blogspot.com/2024/06/help-wanted-port-kde-frameworks-oss.html?utm_source=atom_feed</link>
      <description><![CDATA[如果您正在寻找一种独立且直接的方式来开始为 KDE 做出贡献，那么您来对地方了。在 KDE，我们通过 oss-fuzz 使用模糊测试来尝试确保我们的库能够抵御损坏的输入。以下是您可以如何帮助我们完成这项重要任务。什么是模糊测试？模糊测试涉及将“随机” [1] 数据输入到我们的代码中，以检查其对无效或意外输入的鲁棒性。这对于确保在没有直接用户控制的情况下处理数据的应用程序的安全性和稳定性至关重要。为什么模糊测试很重要？想象一下通过电子邮件收到一张图片，将其保存到您的磁盘并在 Dolphin 中打开它。这将使 Dolphin 创建该图片的缩略图。如果图片已损坏并且我们的图片插件代码不可靠，那么最好的情况就是 Dolphin 崩溃。在最坏的情况下，它可能会导致安全漏洞。因此，模糊测试有助于防止此类漏洞。您可以如何提供帮助：我们需要更新 oss-fuzz 中的 KDE 库版本以使用 Qt6。此任务可能具有挑战性，因为它涉及静态编译并确保为所有编译单元传递了正确的标志。贡献步骤：从 karchive 项目开始下载oss-fuzz并进入karchive 子文件夹。更新 Dockerfile 以从 dev 分支下载 Qt 并从 master 分支下载 KDE 框架。更新 build.sh 脚本：修改 build.sh 脚本以编译 Qt6（这将更难，因为它涉及移动在 karchive_fuzzer.cc 的顶部，您会发现一条注释，其中包含 oss-fuzz 运行的三个命令。使用这些命令来测试映像构建、模糊测试器构建和运行过程。需要帮忙？如果您有疑问或需要帮助，请通过 aacid@kde.org 与我联系，或在 Matrix 上通过 @tsdgeos:kde.org 与我联系注意：[1] 智能模糊测试引擎不会生成纯随机数据。他们使用半随机和半智能技术来有效地查找代码中的问题。]]></description>
      <guid>https://tsdgeos.blogspot.com/2024/06/help-wanted-port-kde-frameworks-oss.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 10 Jun 2024 23:01:00 GMT</pubDate>
    </item>
    <item>
      <title>第 2 周回顾 - Aseprite 的像素完美</title>
      <link>https://kenlo.hashnode.dev/week-2-recap-aseprites-pixel-perfect?utm_source=atom_feed</link>
      <description><![CDATA[大家好，这是第二周，也是我计划进行研究的最后一周。这周我仔细研究了 Krita 的代码库和像素完美算法。重点关注了如何实现像素完美的示例（特别是在 Aseprite 中）。...]]></description>
      <guid>https://kenlo.hashnode.dev/week-2-recap-aseprites-pixel-perfect?utm_source=atom_feed</guid>
      <pubDate>Mon, 10 Jun 2024 03:59:27 GMT</pubDate>
    </item>
    <item>
      <title>新的人机界面指南</title>
      <link>https://pointieststick.com/2024/06/09/new-human-interface-guidelines/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://pointieststick.com/2024/06/09/new-human-interface-guidelines/?utm_source=atom_feed</guid>
      <pubDate>Sun, 09 Jun 2024 22:38:07 GMT</pubDate>
    </item>
    <item>
      <title>KDE Stopmotion 0.8.7 发布</title>
      <link>https://gruenich.blogspot.com/2024/06/release-of-kde-stopmotion-087.html?utm_source=atom_feed</link>
      <description><![CDATA[今天 KDE Stopmotion 0.8.7 正式发布！关于 StopmotionStopmotion
是一款用于创建定格动画的免费开源应用程序。它
可帮助您捕获和编辑动画帧并将其
导出为单个文件。可从网络摄像头、MiniDV 摄像机和 DSLR 摄像机直接
捕获。它提供
洋葱皮、从磁盘导入图像和延时摄影功能。
Stopmotion 支持多个场景、帧编辑、基本音轨、
以不同帧速率播放动画以及用于
图像的 GIMP 集成。可以将影片导出到文件和 Cinelerra 帧列表。从技术上讲，它是一个 C++ / Qt 应用程序，具有对相机捕获库的可选依赖项。0.8.7 版中的更改此版本没有新功能，但对项目本身进行了改进。更改该项目现在正式命名为 KDE Stopmotion。不再使用以前的名称 Linux Stopmotion。已删除对 qmake 的支持。改用 CMake。功能将序列化移植到 libarchive。放弃了 libtar。（感谢 Bastian Germann）错误修复.sto 文件缺少 tar 尾部。 （#16，感谢 Bastian Germann 提供修复）改进使用 pkg-config 查找依赖项 vorbisfile 和 xml2（感谢 Barak Pearlmutter）删除依赖于 Qt 5 中弃用的代码；这是为迁移到 Qt 6 所做的准备。未来计划从 Qt 5 过渡到版本 6。我被困在了  QAudioDeviceInfo  的移植中，该移植已在 Qt 6 中被删除。我需要一些帮助，以便将 Stopmotion 移植到使用 Qt 6 / Qt Mulimedia 处理音频的新方式。我们应该更好地集成到 KDE 的技术堆栈中：国际化，使用 KDE 库，更新和重新格式化文档。参与进来！如果您有兴趣，请尝试 Stopmotion。联系我们的邮件列表 stopmotion@kde.org 或查看 我们的项目。分享您的想法或参与进来！
]]></description>
      <guid>https://gruenich.blogspot.com/2024/06/release-of-kde-stopmotion-087.html?utm_source=atom_feed</guid>
      <pubDate>Sun, 09 Jun 2024 21:35:00 GMT</pubDate>
    </item>
    <item>
      <title>Firefox 配置文件和 Plasma 启动器 (X11)</title>
      <link>https://cukic.co/2024/06/08/firefox-profiles/index.html?utm_source=atom_feed</link>
      <description><![CDATA[我是 Firefox 配置文件的重度用户。除了为不同的活动使用不同的配置文件外，我还有几个额外的配置文件，它们都在 Default 活动中运行。
这意味着我需要在 Plasma 的面板中显示不同的图标，以便能够轻松区分窗口属于哪个配置文件。
当然，我使用显示窗口标题的任务小程序，而不是仅显示图标的标题（我更喜欢可用性而不是极简主义），但这还不够，因为有时 Firefox 窗口中的活动选项卡可能没有最具信息量的标题。
当选择将在面板中显示的图标时，Plasma 似乎依赖于应用程序名称和窗口类。这意味着，默认情况下，所有 Firefox 实例最终都具有相同的图标。


Librewolf 具有自定义配置文件图标

幸运的是，Firefox 允许您通过命令行参数指定它应该使用的窗口类。
firefox -P ProfileName --class WindowClassName
并且，要将启动器连接到特定的窗口类，您只需将以下行添加到 .desktop 文件：
StartupWMClass=WindowClassName
因此，为了获得良好支持的 Firefox 配置文件，您可以创建一个启动器，其桌面文件类似于以下：
[桌面条目]
Exec=firefox -P SocialSites --class FirefoxSocialSites
Icon=user-available-symbolic
StartupWMClass=FirefoxSocialSites
它还适用于 Firefox 衍生产品，例如 Librewolf（可以在上面的屏幕截图中看到）和其他产品。
]]></description>
      <guid>https://cukic.co/2024/06/08/firefox-profiles/index.html?utm_source=atom_feed</guid>
      <pubDate>Sun, 09 Jun 2024 17:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Selenium 入门 - 第 1 部分：Selenium 简介</title>
      <link>https://tube.kockatoo.org/w/nLh4pn9P3dfqGeAYs4NXkW?utm_source=atom_feed</link>
      <description><![CDATA[在此视频中，我介绍了用于测试 KDE 应用程序的 Selenium AT-SPI。我介绍了 KDE 的可持续软件、可访问性和系统测试自动化目标，以及 Selenium 如何帮助实现所有这些目标。
Selenium AT-SPI 是一款出色的软件，由 KDE 开发人员 Harald Sitter 编写。它是 KDE 中用于自动测试 GUI 应用程序的工具。这使开发人员能够设计所有人都可以访问的应用程序并提高其能源效率。作为 KDE 2024 季的一部分，我决定为 KDE 开发人员制作一个视频教程。
如果您觉得此视频有用，您可以通过 Gitter 与我联系。我很乐意收到您的回复 😃
该视频由 Pradyot Ranjan (@pradyotranjan:gitter.im) 制作。

第 2 部分：设置 Selenium
第 3 部分：识别可访问性问题
第 4 部分：编写 Selenium 测试
]]></description>
      <guid>https://tube.kockatoo.org/w/nLh4pn9P3dfqGeAYs4NXkW?utm_source=atom_feed</guid>
      <pubDate>Sat, 08 Jun 2024 19:31:40 GMT</pubDate>
    </item>
    <item>
      <title>Selenium 入门 - 第 4 部分：编写 Selenium 测试</title>
      <link>https://tube.kockatoo.org/w/4AZiuGLD9qz1c1qNxySMfv?utm_source=atom_feed</link>
      <description><![CDATA[在此视频中，我深入研究了如何使用 Selenium 编写测试。我为 KCalc 计算器应用程序创建了一个简单的测试，并使用 Selenium AT-SPI 运行它。可以按照类似的步骤为任何 KDE 应用程序编写 GUI 测试。
Selenium AT-SPI 是一款出色的软件，由 KDE 开发人员 Harald Sitter 编写。它是 KDE 中用于自动测试 GUI 应用程序的工具。这使开发人员能够设计所有人都可以访问的应用程序并提高其能源效率。作为 KDE 2024 季的一部分，我决定为 KDE 开发人员制作一个视频教程。
如果您觉得这个视频有用，您可以在 Gitter 上联系我。我很乐意收到您的回复 😃
该视频由 Pradyot Ranjan (@pradyotranjan:gitter.im) 制作。

第 1 部分：Selenium 简介
第 2 部分：设置 Selenium
第 3 部分：识别可访问性问题
]]></description>
      <guid>https://tube.kockatoo.org/w/4AZiuGLD9qz1c1qNxySMfv?utm_source=atom_feed</guid>
      <pubDate>Sat, 08 Jun 2024 19:20:15 GMT</pubDate>
    </item>
    <item>
      <title>Selenium 入门 - 第 3 部分：识别可访问性问题</title>
      <link>https://tube.kockatoo.org/w/qx66EDtn9psvQb4jtqtXwL?utm_source=atom_feed</link>
      <description><![CDATA[在此视频中，我解释了 accerciser 实用程序的工作原理。Accerciser 是一种用于识别和测试 GUI 可访问性元素的工具。我还在 KDE 计算器应用程序 KCalc 上运行 accerciser。
Selenium AT-SPI 是一款出色的软件，由 KDE 开发人员 Harald Sitter 编写。它是 KDE 中用于自动测试 GUI 应用程序的工具。这使开发人员能够设计所有人都可以访问的应用程序并提高其能源效率。作为 KDE 2024 季的一部分，我决定为 KDE 开发人员制作一个视频教程。
如果您觉得这个视频有用，您可以在 Gitter 上联系我。我很乐意收到您的回复 😃
该视频由 Pradyot Ranjan (@pradyotranjan:gitter.im) 制作。

第 1 部分：Selenium 简介
第 2 部分：设置 Selenium
第 4 部分：编写 Selenium 测试
]]></description>
      <guid>https://tube.kockatoo.org/w/qx66EDtn9psvQb4jtqtXwL?utm_source=atom_feed</guid>
      <pubDate>Sat, 08 Jun 2024 19:19:51 GMT</pubDate>
    </item>
    <item>
      <title>Selenium 入门 - 第 2 部分：设置 Selenium</title>
      <link>https://tube.kockatoo.org/w/xvaoVsAgka1rnQjwQ5sBkK?utm_source=atom_feed</link>
      <description><![CDATA[在此视频中，我在 KDE Neon 上本地设置了 Selenium AT-SPI。此视频遵循此处的 Selenium 设置指南：https://community.kde.org/Selenium。
Selenium AT-SPI 是由 KDE 开发人员 Harald Sitter 编写的一款出色的软件。它是 KDE 中用于自动测试 GUI 应用程序的工具。这使开发人员能够设计所有人都可以访问的应用程序并提高其能源效率。作为 KDE 2024 季的一部分，我决定为 KDE 开发人员制作一个视频教程。
如果您觉得此视频有用，您可以通过 Gitter 与我联系。我很乐意收到您的回复 😃
该视频由 Pradyot Ranjan (@pradyotranjan:gitter.im) 制作。

第 1 部分：Selenium 简介
第 3 部分：识别可访问性问题
第 4 部分：编写 Selenium 测试
]]></description>
      <guid>https://tube.kockatoo.org/w/xvaoVsAgka1rnQjwQ5sBkK?utm_source=atom_feed</guid>
      <pubDate>Sat, 08 Jun 2024 19:19:27 GMT</pubDate>
    </item>
    <item>
      <title>凯特趣味标志</title>
      <link>https://kate-editor.org/post/2024/2024-06-08-kate-fun-logo/?utm_source=atom_feed</link>
      <description><![CDATA[G2 在 reddit 上为 Kate 发布了一些有趣的徽标。
我认为它们很漂亮，很华丽，如果你想表达对 Kate 的欣赏，它们很适合，并且喜欢那种艺术风格，也是我们超棒的图标和吉祥物的一个很好的补充。
静态版本





动画版本





许可
G2 根据 CC BY-NC-SA 4.0 许可了这些文件。
欢迎随意分享此许可和 G2 信用的内容。
评论？
可以在 r/KDE 上找到与此相匹配的帖子。]]></description>
      <guid>https://kate-editor.org/post/2024/2024-06-08-kate-fun-logo/?utm_source=atom_feed</guid>
      <pubDate>Sat, 08 Jun 2024 19:11:00 GMT</pubDate>
    </item>
    </channel>
</rss>