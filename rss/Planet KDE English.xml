<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Tue, 04 Jun 2024 18:38:00 GMT</lastBuildDate>
    <item>
      <title>春奈 1.1.2</title>
      <link>https://haruna.kde.org/blog/2024-06-04-haruna-1.1.2/?utm_source=atom_feed</link>
      <description><![CDATA[Haruna 1.1.2 版已发布。
您现在可以在 flathub 上获取它：

其他软件包格式的可用性取决于您的发行版和打包 Haruna 的人员。
Windows 版本：

haruna-1.1.2-windows-gcc-x86_64.exe
haruna-1.1.2-windows-gcc-x86_64.7z
haruna-1.1.2-windows-gcc-x86_64-dbg.7z

如果您喜欢 Haruna，请支持其开发：GitHub 赞助商 | Liberapay | PayPal
功能请求和错误应发布在 bugs.kde.org 上，但对于错误，请确保填写模板并提供尽可能多的信息。

变更日志：
1.1.2
错误修复：

当没有要选择的曲目时，禁用曲目选择菜单和按钮
修复自定义命令切换
重新添加“滚动到播放项目”和“垃圾文件”播放列表上下文菜单选项在 Qt6 移植期间丢失
修复了启动时某些 mpv 属性未正确设置的问题
修复了 Windows 上的视频渲染问题
]]></description>
      <guid>https://haruna.kde.org/blog/2024-06-04-haruna-1.1.2/?utm_source=atom_feed</guid>
      <pubDate>Tue, 04 Jun 2024 03:00:00 GMT</pubDate>
    </item>
    <item>
      <title>FreeBSD 13 测试</title>
      <link>https://euroquis.nl//freebsd/2024/06/04/freebsd13.html?utm_source=atom_feed</link>
      <description><![CDATA[截至撰写本文时，FreeBSD 13 仍受支持（这让 KDE-FreeBSD 的人们非常懊恼，他们希望尽快推出仅限 14 的版本，以便于支持和修补）。

我自己的机器是一个奇怪的怪兽，介于 13.2 和 13.3 之间，但我一直在努力解决 FreeBSD 集群机器上一些软件包构建失败的问题，包括 13.2、13.3 和 14.0 的所有版本 - 它在我的机器上构建，然后在集群上因编译器错误而失败。更奇怪的是，它看起来像“明显缺少 C++ 头文件”，所以我不明白为什么它对我有用。以下是我为未来自己准备的一些笔记，关于如何快速设置虚拟机进行端口测试。

在我记下这些并开始进行一些测试后，
我发现我有一个本地修复程序，但我忘了推送。
虽然有点尴尬，但至少我有一些笔记，可以供将来遇到实际问题时参考。


设置带有 CD 驱动器和 40GiB 硬盘的 VirtualBox VM，
获取 FreeBSD 13.2 安装 ISO 映像，
完成 FreeBSD 安装。这可能需要 5 分钟，
所有设置均采用默认设置并创建一个用户。
我在整个虚拟磁盘上使用了自动 UFS。不要为 ports 树而烦恼。

启动新安装的系统后，即可开始配置 ports 测试。

以 root 身份执行 pkg install git cmake ，这将首先安装包管理器，
然后是 git 和 cmake，这两者都是我们无论如何都需要的。
以 root 身份克隆 ports 树。我使用 git clone --depth 50 -b 2024Q2 https://git.freebsd.org/ports.git /usr/ports 获取季度分支。
使用包管理器找出所需端口的依赖项。使用 pkg rquery %dn 后跟所需端口的名称，即可获得端口的依赖项。由于大多数 FreeBSD 端口都包含开发人员电池，因此这些也是构建依赖项。
使用 pkg install 安装它们。反引号扩展可以使事情变得更容易。
如果没有可用的软件包，则 ports 框架会提供 make build-depends-list run-depends-list
它将打印依赖项 ports 目录的完整路径。通过一点 sed(1)
处理，它会变成可安装软件包的列表。

系统启动后，ports 构建可以照常进行。]]></description>
      <guid>https://euroquis.nl//freebsd/2024/06/04/freebsd13.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 22:00:00 GMT</pubDate>
    </item>
    <item>
      <title>最近的业余项目</title>
      <link>https://jbb.ghsq.de/kde/2024/06/03/My-side-projects.html?utm_source=atom_feed</link>
      <description><![CDATA[除了我在 KDE 和其他地方的大型项目外，
多年来，我一直在从事一些小型项目。
由于这些项目自然很难找到，我想在这里简要介绍一下。
也许你会发现其中一些很有用。
MatePay
MatePay 是一个为我所在的学生黑客空间 Spline 开发的小型支付系统。
它有一个小型内置商店，我们主要用它来出售我们在空间中提供的饮料。
但是，它还具有一个应用程序可以用来处理付款的 API。我们用它来运行大学的公共打印机。
MatePay 基于一个简单的 SQLite 数据库，只有在信任托管它的一方时才有意义。



Mateprint
Mateprint 是一个具有支付功能的打印 Web 界面。
它还可以打印多份副本和双面页面。
它只是一个用 Rust 编写的简单静态可执行文件。
所有艰苦的工作都由 CUPS 完成。



Rawqueued
最初，公共打印机都是通过网络连接的，使用 HP 网络附加卡。
不幸的是，就像打印机一样，这些卡也变得非常老旧（约 30 年），并且最近开始频繁报废。
由于某些原因，这些卡很贵，所以我决定用 Raspberry Pi 替换它们。我编写了一个小型 IPP 服务器，它只是将收到的有效负载转发到打印机，这几乎也是网卡所做的。
此设置比在多个设备上维护 cups 过滤器要简单一些，因此更复杂的部分都可以在中央虚拟机上运行。
您可以在此处找到存储库。
Wasfaehrt



在大学里，我们在一间学生管理的房间里放了一块离校公告板。
它由与 KDE Itinerary (KPublicTransport) 相同的代码提供支持。
您可以在Codeberg上找到它。



SpaceAPI
对于 Spline 房间，我们当然需要一个 SpaceAPI 端点。
有一个小型服务器，它提供 SpaceAPI 端点和一个 API，用于更新门是否打开。
更新由在 Raspberry Pi 上运行的守护程序发送。]]></description>
      <guid>https://jbb.ghsq.de/kde/2024/06/03/My-side-projects.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 11:55:02 GMT</pubDate>
    </item>
    <item>
      <title>GSoC'24 Okular | 一个惊人的开始</title>
      <link>https://prathamgandhi.github.io/posts/gsoc24-update1/?utm_source=atom_feed</link>
      <description><![CDATA[互联网人士，
虽然到目前为止，我在博客文章中大多保持沉默，但我想说的是，KDE 的 GSoC&#39;24 对我来说一直很强大。
项目：Okular 的表单/Javascript 支持改进
KDE 开发的跨平台通用文档查看器 Okular
支持带有表单的 PDF。
这些表单通常使用 Javascript 来让表单对用户更方便。
但是，截至今天，Okular 中对 Javascript 的支持不足。
在此 Google Summer of Code 时间线期间，我将致力于改进此表单和 Okular 中的 javascript 支持。
Okular 使用 Qt 框架提供的 QJSEngine 在沙盒环境中运行 javascript。虽然 QJSEngine 提供了引擎，但 PDF 规范支持的所有必要 JS 对象都需要我们支持。
除此之外，还需要实现许多 Acrobat 特定的预定义脚本，以便 PDF 能够与其他 PDF 阅读器（如 Adob​​e Reader、PDF.js 等）一致地工作。
我的项目涉及为 Okular 表单中的尽可能多的功能提供支持。我要感谢 Albert Astals Cid 为我提供这个项目的指导。
第 1 周回顾
编码期从 5 月 27 日正式开始，在第 1 周，我合并了以下合并请求（太棒了！！）。

event.selStart &amp;&amp; event.selEnd：这些事件属性允许脚本编写者正确使用在 Keystroke 事件期间通过 event.selStart 和 event.selEnd 选择的文本部分。这些属性还将帮助我进一步实现 Keystroke 事件的预定义方法。!MR981
AFPercent_Format：此预定义方法允许正确格式化在百分比表单字段中输入的数据。 !MR982

除此之外，我还有一些 MR 正在审核中。

AFTime_Keystroke：此预定义方法仅允许在表单字段中输入可接受的输入，这些字段应该是时间数据。 !MR987
event.change：虽然 event.change 已经有实现，但它与其他 PDF 阅读器不一致。它目前评估从第一个差异点到字符串末尾的变化。事实上，它应该只反映传入的变化。 !MR998

虽然第一周开局不错，但这里还有更多功能需要实现。接下来的几周，我计划合并上述 MR，然后研究其他按键预定义方法。
本博客就到此为止，下次见。干杯！]]></description>
      <guid>https://prathamgandhi.github.io/posts/gsoc24-update1/?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 04:30:21 GMT</pubDate>
    </item>
    <item>
      <title>第一周回顾——研究和准备</title>
      <link>https://kenlo.hashnode.dev/week-1-recap-research-and-prep?utm_source=atom_feed</link>
      <description><![CDATA[欢迎来到博客。这是第一周，大部分时间都用于研究和学习代码库的工作原理。重点是，我试图了解 Krita 究竟是如何“绘制”的，也就是将多边形放到画布上。现在...]]></description>
      <guid>https://kenlo.hashnode.dev/week-1-recap-research-and-prep?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 00:57:51 GMT</pubDate>
    </item>
    <item>
      <title>Amarok 3.0.1 发布</title>
      <link>https://blogs.kde.org/2024/06/02/amarok-3.0.1-released/?utm_source=atom_feed</link>
      <description><![CDATA[Amarok 开发小组很高兴地宣布 Amarok 3.0.1 现已发布，这是 Amarok 3.0 &quot;Castaway&quot; 的第一个错误修复版本
3.0.1 包含许多小改进和错误修复，这是最早实现的功能请求，可追溯到 2010 年。维基百科小程序、UI 字符串以及播放列表生成和集合过滤
是此版本中得到多项改进的组件之一。
进一步完善 Qt5/KF5 版本以及不断进行清理和准备以使 Qt6/KF6 版本更接近的努力一直在进行中，并且将继续下去。
自 3.0.0 以来的更改
功能：

在 Wikipedia 小程序中添加了将图像复制到剪贴板的选项，如果单击了非 Wikipedia 链接，则会显示可单击的通知。
添加了一个选项，用于选择是否在上下文浏览器中为不同艺术家/不同专辑艺术家下的条目显示曲目的艺术家（BR 276039、BR 248101)
指示 Wikipedia 小程序中哪个搜索选项处于活动状态 (BR 332010)

更改：

Amarok 现在依赖于 KDE Frameworks 5.78。
改进用户界面中的字符串（包括 BR 343896、BR 234854)
通过最小化/隐藏分析器减少 CPU 使用率 (BR 390063）和其他组件。

BUGFIXES：

各种标签匹配偏差、APG 和集合过滤相关修复（BR 375565、BR 406751、BR 435810、BR 382456)
读取重放增益标签时忽略任何无限值 (BR 486084)
避免在 phonon-vlc 播放停止时将音量设置为 0 (BR 442319)
播放列表重复曲目删除修复 (BR 313791)

获取 Amarok
除了 源代码，Amarok 可从许多发行版的软件包存储库安装，这些存储库可能很快就会更新到 3.0.1。
Flatpak 目前可在 flathub-beta 上获取。
Packager 部分
您可以在
download.kde.org 上找到 tarball 包
并且已使用 Tuomas Nurmi 的 GPG 密钥。]]></description>
      <guid>https://blogs.kde.org/2024/06/02/amarok-3.0.1-released/?utm_source=atom_feed</guid>
      <pubDate>Sun, 02 Jun 2024 20:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Git 生活质量（2）</title>
      <link>https://euroquis.nl//blabla/2024/06/01/git.html?utm_source=atom_feed</link>
      <description><![CDATA[这里还有另一个小小的 git 便利之处，我将其作为一封信写在博客上，寄给未来需要再次查阅的自己：git log 包含文件名，git log 带有一些历史结构的图形注释。

这些只是我的简短笔记。如果您想要一个可读性强的 git 介绍，我建议您阅读 Julia Evans
“Git 的工作原理”。

Git 命令有如此多的选项，所以我永远记不住
哪个是什么，但这里有两个来自我的 ~/.gitconfig 的别名条目：
它们分别代表 file log 和 graph log。
[别名]
flog = log --name-status
glog = log --oneline --decorate --graph

使用这些别名，git flog 会生成一个日志，其中列出了
每个提交受影响的文件及其状态（添加、修改、删除……），这对于“我当时接触了哪些文件？”这个问题非常有用。
对于紧凑视图，git glog 仅提供一行摘要消息
并尝试绘制历史图。对于线性历史记录，
这归结为每行以 * 开头，但
git alligator history
更加修饰 - 但仍然可读。]]></description>
      <guid>https://euroquis.nl//blabla/2024/06/01/git.html?utm_source=atom_feed</guid>
      <pubDate>Fri, 31 May 2024 22:00:00 GMT</pubDate>
    </item>
    <item>
      <title>本周没有TWiK</title>
      <link>https://pointieststick.com/2024/05/31/no-twik-this-week-2/?utm_source=atom_feed</link>
      <description><![CDATA[我们下周回来！]]></description>
      <guid>https://pointieststick.com/2024/05/31/no-twik-this-week-2/?utm_source=atom_feed</guid>
      <pubDate>Fri, 31 May 2024 17:23:26 GMT</pubDate>
    </item>
    <item>
      <title>KDE 应用程序计划</title>
      <link>https://carlschwan.eu/2024/05/31/kde-apps-initiative/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://carlschwan.eu/2024/05/31/kde-apps-initiative/?utm_source=atom_feed</guid>
      <pubDate>Fri, 31 May 2024 15:10:35 GMT</pubDate>
    </item>
    <item>
      <title>网络评论，第 2024-22 周</title>
      <link>https://ervin.ipsquad.net/blog/2024/05/31/web-review-week-2024-22/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://ervin.ipsquad.net/blog/2024/05/31/web-review-week-2024-22/?utm_source=atom_feed</guid>
      <pubDate>Fri, 31 May 2024 10:06:41 GMT</pubDate>
    </item>
    </channel>
</rss>