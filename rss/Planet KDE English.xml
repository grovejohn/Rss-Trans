<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Wed, 05 Jun 2024 18:37:44 GMT</lastBuildDate>
    <item>
      <title>Kubuntu、KDE、Debian：我仍然在这里，深情地怀念我的兄弟。</title>
      <link>https://www.scarlettgatelymoore.dev/kubuntu-kde-debian-i-am-still-here-in-loving-memory-of-my-brother/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://www.scarlettgatelymoore.dev/kubuntu-kde-debian-i-am-still-here-in-loving-memory-of-my-brother/?utm_source=atom_feed</guid>
      <pubDate>Wed, 05 Jun 2024 17:30:20 GMT</pubDate>
    </item>
    <item>
      <title>KDE 未来两年应该关注什么？你可以提出一个目标！</title>
      <link>https://blog.lydiapintscher.de/2024/06/05/what-should-kde-focus-on-for-the-next-2-years-you-can-propose-a-goal/?utm_source=atom_feed</link>
      <description><![CDATA[每 2 到 3 年，KDE 都会选择 3 个目标，供整个社区在未来几年关注。在过去的 2 年里，我们专注于提高应用程序的可访问性，努力使我们的软件更具可持续性和自动化，并改进了许多流程，使 KDE 中的软件开发更加顺畅。要了解有关这些目标的更多信息，请查看 KDE 目标页面。我们将在今年晚些时候在 维尔茨堡学院 上总结这些目标。
现在是时候确定下一个目标了。我们今天开始征集提案。这意味着您（没错，就是您！）可以为您和其他人在未来 2 年内想要做的事情而努力，并团结 KDE 社区。为了给你一些灵感，你可以看看我们前几年制定的完整目标列表。
它是如何工作的？
你（和一小群其他人）可以通过在这个 Phabricator 论坛上开立工单来提交提案。将模板复制到新工单中并解释你的想法。模板会给你一些提示，帮助你创建一个有意义的提案。这个过程开放至 7 月 5 日。 （7 月 5 日我们将开始完善阶段，届时其他人可以进一步帮助您改进提案。）
需要注意的事项

该流程明确向尚未成为 KDE 贡献者的人员开放。
该流程明确向所有人开放，而不仅仅是开发人员。
我们希望目标的拥护者成为拥护者，而不是唯一为实现目标而努力的人。同时，他们需要付出大量努力来团结人们实现他们的目标。

与以前的版本相比有什么不同？
这次我们对流程进行了一些调整。如果您熟悉前几年的流程，以下是最重要的变化：

我们正在从个人拥护者转变为一个小的拥护者团队。每个目标都应该有一个人来推动目标的愿景，一个人在技术上引导它，一个人在推动它。其他设置也是可能的，只要它对特定目标有意义，但目标需要一个小团队。还没有团队吗？没关系。提交一份提案并说出你的需求。我们会尽力帮助寻找其他人加入。
我们更注重让冠军角色通过其他人推动目标向前发展，而不是自己做所有的工作。
我们将与目标冠军合作，为支持他们目标的特定项目筹集资金。

时间表是什么？

从今天开始到 7 月 5 日：提出目标并寻找团队
7 月 5 日至 8 月 15 日：与社区一起完善提案（确定问题、消除阻碍、完善提案等）
8 月 15 日至 31 日：由活跃的 KDE 贡献者对提议的目标进行投票
9 月 6/7 日：在 Akademy 上公布选定的目标

还有问题吗？
如果您还有问题，可以在不同的地方提问：

6 月 14 日晚上 7 点柏林时间办公时间。您可以在此处找到您所在时区的时间。会议将在 BigBlueButton 上举行。
KDE 目标矩阵 频道。
KDE 社区邮件列表。
直接联系我。
]]></description>
      <guid>https://blog.lydiapintscher.de/2024/06/05/what-should-kde-focus-on-for-the-next-2-years-you-can-propose-a-goal/?utm_source=atom_feed</guid>
      <pubDate>Wed, 05 Jun 2024 10:51:23 GMT</pubDate>
    </item>
    <item>
      <title>Krita 5.2.3 首个 Beta 版发布</title>
      <link>https://krita.org/en/posts/2024/krita-5-2-3-beta1/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://krita.org/en/posts/2024/krita-5-2-3-beta1/?utm_source=atom_feed</guid>
      <pubDate>Wed, 05 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>下载2.2.0</title>
      <link>https://blogs.kde.org/2024/06/05/ruqola-2.2.0/?utm_source=atom_feed</link>
      <description><![CDATA[Ruqola 2.2.0 是 Rocket.chat 应用程序的一个功能和错误修复版本。
改进：

允许增大/减小字体 (CTRL++/CTRL+-)
添加频道列表样式 (精简/中等/扩展)
添加转发消息
改进提及支持。
添加对深度链接 Deep Linking 的支持。
实施阻止操作。
实施个人令牌身份验证。 Bug 481400
添加 Plasma 活动支持
添加报告用户支持
实现频道声音通知。
实现新房间声音通知。
实现已排序/未排序的 markdown 列表。

一些错误修复：

修复暗模式支持。
修复 jitsi 支持。修复直接频道中的翻译消息。
不将 @here/@all 显示为用户。
减少内存占用。
使用 RESTAPI 进行日志记录。
允许发送多个文件。
修复预览网址。

网址： https://download.kde.org/stable/ruqola/
来源：ruqola-2.2.0.tar.xz
SHA256： 4091126316ab0cd2d4a131facd3cd8fc8c659f348103b852db8b6d1fd4f164e2
签名人： E0A3EB202F8E57528E13E72FD7574483BB57B18DJonathan Esk-Riddell jr@jriddell.org
https://jriddell.org/esk-riddell.gpg]]></description>
      <guid>https://blogs.kde.org/2024/06/05/ruqola-2.2.0/?utm_source=atom_feed</guid>
      <pubDate>Wed, 05 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>春奈 1.1.2</title>
      <link>https://haruna.kde.org/blog/2024-06-04-haruna-1.1.2/?utm_source=atom_feed</link>
      <description><![CDATA[Haruna 1.1.2 版已发布。
您现在可以在 flathub 上获取它：

其他软件包格式的可用性取决于您的发行版和打包 Haruna 的人员。
Windows 版本：

haruna-1.1.2-windows-gcc-x86_64.exe
haruna-1.1.2-windows-gcc-x86_64.7z
haruna-1.1.2-windows-gcc-x86_64-dbg.7z

如果您喜欢 Haruna，请支持其开发：GitHub 赞助商 | Liberapay | PayPal
功能请求和错误应发布在 bugs.kde.org 上，但对于错误，请确保填写模板并提供尽可能多的信息。

变更日志：
1.1.2
错误修复：

当没有要选择的曲目时，禁用曲目选择菜单和按钮
修复自定义命令切换
重新添加“滚动到播放项目”和“垃圾文件”播放列表上下文菜单选项在 Qt6 移植期间丢失
修复了启动时某些 mpv 属性未正确设置的问题
修复了 Windows 上的视频渲染问题
]]></description>
      <guid>https://haruna.kde.org/blog/2024-06-04-haruna-1.1.2/?utm_source=atom_feed</guid>
      <pubDate>Tue, 04 Jun 2024 03:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Plasma 6 和“传统”窗口平铺</title>
      <link>https://cukic.co/2024/06/04/plasma-6-and-tiling/index.html?utm_source=atom_feed</link>
      <description><![CDATA[直到最近，我仍在使用 Plasma 5.x。我已经习惯了 KWin 的 Bismuth 窗口平铺脚本，以至于我无法想象自己更新到无法使用 Bismuth 的 Plasma 6.x。
不幸的是 (?)，最近的 Debian 更新之一也破坏了 Plasma 5.x 中的 Bismuth，所以我再也无法使用旧版本了。我现在（再次）运行（大多数）KDE 软件的开发版本。
自更新以来，我设法使 Qtile 平铺窗口管理器在一定程度上与 Plasma 配合使用。但是我破解的 Qtile 和 Plasma 之间的集成并不理想，我一直在 KWin 和 Frankenstein Qtile 之间切换，KWin 运行完美，但没有平铺，而我的 Frankenstein Qtile 运行得不是很好，但有平铺。
也许我会在重新破解 Qtile 时写下这篇文章，但这可能不会很快发生，因为……
Krohnkite
然后我看到了 Bismuth 的前身——Krohnkite 脚本已经移植到 KWin 6 的消息——请参阅 reddit 上的公告，github 获取并查看代码，以及 kde store 中您可以安装的软件包。
向所有参与重生的人致以崇高的敬意，该脚本的运行效果与 KWin 5 一样好。
窗口装饰
唯一缺少的是 Bismuth 所具有的简单的“窗口周围只有一条线”窗口装饰。
KWin 6 和 Krohnkite + Bismuth 装饰
现在我们也有了这个，我已经将原始的 Bismuth 窗口装饰移植到 KWin 6（没什么大不了的，只需进行一些微小的更改即可编译）。代码和安装说明可在 github 上找到。
]]></description>
      <guid>https://cukic.co/2024/06/04/plasma-6-and-tiling/index.html?utm_source=atom_feed</guid>
      <pubDate>Tue, 04 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>FreeBSD 13 测试</title>
      <link>https://euroquis.nl//freebsd/2024/06/04/freebsd13.html?utm_source=atom_feed</link>
      <description><![CDATA[截至撰写本文时，FreeBSD 13 仍受支持（这让 KDE-FreeBSD 的人们非常懊恼，他们希望尽快推出仅限 14 的版本，以便于支持和修补）。

我自己的机器是一个奇怪的怪兽，介于 13.2 和 13.3 之间，但我一直在努力解决 FreeBSD 集群机器上一些软件包构建失败的问题，包括 13.2、13.3 和 14.0 的所有版本 - 它在我的机器上构建，然后在集群上因编译器错误而失败。更奇怪的是，它看起来像“明显缺少 C++ 头文件”，所以我不明白为什么它对我有用。以下是我为未来自己准备的一些笔记，关于如何快速设置虚拟机进行端口测试。

在我记下这些并开始进行一些测试后，
我发现我有一个本地修复程序，但我忘了推送。
虽然有点尴尬，但至少我有一些笔记，可以供将来遇到实际问题时参考。


设置带有 CD 驱动器和 40GiB 硬盘的 VirtualBox VM，
获取 FreeBSD 13.2 安装 ISO 映像，
完成 FreeBSD 安装。这可能需要 5 分钟，
所有设置均采用默认设置并创建一个用户。
我在整个虚拟磁盘上使用了自动 UFS。不要为 ports 树而烦恼。

启动新安装的系统后，即可开始配置 ports 测试。

以 root 身份执行 pkg install git cmake ，这将首先安装包管理器，
然后是 git 和 cmake，这两者都是我们无论如何都需要的。
以 root 身份克隆 ports 树。我使用 git clone --depth 50 -b 2024Q2 https://git.freebsd.org/ports.git /usr/ports 获取季度分支。
使用包管理器找出所需端口的依赖项。使用 pkg rquery %dn 后跟所需端口的名称，即可获得端口的依赖项。由于大多数 FreeBSD 端口都包含开发人员电池，因此这些也是构建依赖项。
使用 pkg install 安装它们。反引号扩展可以使事情变得更容易。
如果没有可用的软件包，则 ports 框架会提供 make build-depends-list run-depends-list
它将打印依赖项 ports 目录的完整路径。通过一点 sed(1)
处理，它会变成可安装软件包的列表。

系统启动后，ports 构建可以照常进行。]]></description>
      <guid>https://euroquis.nl//freebsd/2024/06/04/freebsd13.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 22:00:00 GMT</pubDate>
    </item>
    <item>
      <title>最近的业余项目</title>
      <link>https://jbb.ghsq.de/kde/2024/06/03/My-side-projects.html?utm_source=atom_feed</link>
      <description><![CDATA[除了我在 KDE 和其他地方的大型项目外，
多年来，我一直在从事一些小型项目。
由于这些项目自然很难找到，我想在这里简要介绍一下。
也许你会发现其中一些很有用。
MatePay
MatePay 是一个为我所在的学生黑客空间 Spline 开发的小型支付系统。
它有一个小型内置商店，我们主要用它来出售我们在空间中提供的饮料。
但是，它还具有一个应用程序可以用来处理付款的 API。我们用它来运行大学的公共打印机。
MatePay 基于一个简单的 SQLite 数据库，只有在信任托管它的一方时才有意义。



Mateprint
Mateprint 是一个具有支付功能的打印 Web 界面。
它还可以打印多份副本和双面页面。
它只是一个用 Rust 编写的简单静态可执行文件。
所有艰苦的工作都由 CUPS 完成。



Rawqueued
最初，公共打印机都是通过网络连接的，使用 HP 网络附加卡。
不幸的是，就像打印机一样，这些卡也变得非常老旧（约 30 年），并且最近开始频繁报废。
由于某些原因，这些卡很贵，所以我决定用 Raspberry Pi 替换它们。我编写了一个小型 IPP 服务器，它只是将收到的有效负载转发到打印机，这几乎也是网卡所做的。
此设置比在多个设备上维护 cups 过滤器要简单一些，因此更复杂的部分都可以在中央虚拟机上运行。
您可以在此处找到存储库。
Wasfaehrt



在大学里，我们在一间学生管理的房间里放了一块离校公告板。
它由与 KDE Itinerary (KPublicTransport) 相同的代码提供支持。
您可以在Codeberg上找到它。



SpaceAPI
对于 Spline 房间，我们当然需要一个 SpaceAPI 端点。
有一个小型服务器，它提供 SpaceAPI 端点和一个 API，用于更新门是否打开。
更新由在 Raspberry Pi 上运行的守护程序发送。]]></description>
      <guid>https://jbb.ghsq.de/kde/2024/06/03/My-side-projects.html?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 11:55:02 GMT</pubDate>
    </item>
    <item>
      <title>GSoC'24 Okular | 一个惊人的开始</title>
      <link>https://prathamgandhi.github.io/posts/gsoc24-update1/?utm_source=atom_feed</link>
      <description><![CDATA[互联网人士，
虽然到目前为止，我在博客文章中大多保持沉默，但我想说的是，KDE 的 GSoC&#39;24 对我来说一直很强大。
项目：Okular 的表单/Javascript 支持改进
KDE 开发的跨平台通用文档查看器 Okular
支持带有表单的 PDF。
这些表单通常使用 Javascript 来让表单对用户更方便。
但是，截至今天，Okular 中对 Javascript 的支持不足。
在此 Google Summer of Code 时间线期间，我将致力于改进此表单和 Okular 中的 javascript 支持。
Okular 使用 Qt 框架提供的 QJSEngine 在沙盒环境中运行 javascript。虽然 QJSEngine 提供了引擎，但 PDF 规范支持的所有必要 JS 对象都需要我们支持。
除此之外，还需要实现许多 Acrobat 特定的预定义脚本，以便 PDF 能够与其他 PDF 阅读器（如 Adob​​e Reader、PDF.js 等）一致地工作。
我的项目涉及为 Okular 表单中的尽可能多的功能提供支持。我要感谢 Albert Astals Cid 为我提供这个项目的指导。
第 1 周回顾
编码期从 5 月 27 日正式开始，在第 1 周，我合并了以下合并请求（太棒了！！）。

event.selStart &amp;&amp; event.selEnd：这些事件属性允许脚本编写者正确使用在 Keystroke 事件期间通过 event.selStart 和 event.selEnd 选择的文本部分。这些属性还将帮助我进一步实现 Keystroke 事件的预定义方法。!MR981
AFPercent_Format：此预定义方法允许正确格式化在百分比表单字段中输入的数据。 !MR982

除此之外，我还有一些 MR 正在审核中。

AFTime_Keystroke：此预定义方法仅允许在表单字段中输入可接受的输入，这些字段应该是时间数据。 !MR987
event.change：虽然 event.change 已经有实现，但它与其他 PDF 阅读器不一致。它目前评估从第一个差异点到字符串末尾的变化。事实上，它应该只反映传入的变化。 !MR998

虽然第一周开局不错，但这里还有更多功能需要实现。接下来的几周，我计划合并上述 MR，然后研究其他按键预定义方法。
本博客就到此为止，下次见。干杯！]]></description>
      <guid>https://prathamgandhi.github.io/posts/gsoc24-update1/?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 04:30:21 GMT</pubDate>
    </item>
    <item>
      <title>第一周回顾——研究和准备</title>
      <link>https://kenlo.hashnode.dev/week-1-recap-research-and-prep?utm_source=atom_feed</link>
      <description><![CDATA[欢迎来到博客。这是第一周，大部分时间都用于研究和学习代码库的工作原理。重点是，我试图了解 Krita 究竟是如何“绘制”的，也就是将多边形放到画布上。现在...]]></description>
      <guid>https://kenlo.hashnode.dev/week-1-recap-research-and-prep?utm_source=atom_feed</guid>
      <pubDate>Mon, 03 Jun 2024 00:57:51 GMT</pubDate>
    </item>
    </channel>
</rss>