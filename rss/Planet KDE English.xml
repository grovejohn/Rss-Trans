<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>星球在哪里|英语</title>
    <link>https://planet.kde.org/uk/</link>
    <description></description>
    <lastBuildDate>Fri, 14 Jun 2024 10:37:00 GMT</lastBuildDate>
    <item>
      <title>Qt Creator 14 Beta 发布</title>
      <link>https://www.qt.io/blog/qt-creator-14-beta-released?utm_source=atom_feed</link>
      <description><![CDATA[我们很高兴地宣布 Qt Creator 14 Beta 版发布！
]]></description>
      <guid>https://www.qt.io/blog/qt-creator-14-beta-released?utm_source=atom_feed</guid>
      <pubDate>Fri, 14 Jun 2024 10:21:30 GMT</pubDate>
    </item>
    <item>
      <title>GSoC '24 进展：第 1 周和第 2 周</title>
      <link>https://seri037.github.io/blog/posts/development/2/?utm_source=atom_feed</link>
      <description><![CDATA[嗨！编码期开始已经过去了两个多星期。在这篇博文中，我将简要总结一下前两周的工作。
在花了一些时间审查代码后，我决定从重构现有的与 ASS 格式字幕相关的代码开始。这有两个主要目标：首先，使 Kdenlive 能够从 ASS 字幕（具体来说，是 libass 支持的功能）中读取尽可能多的信息并将其加载到内存中；其次，确保 Kdenlive 可以将所有这些信息保存回文件中。由于 SubtitleModel 已经包含了大量 ASS 格式字幕的代码，我的工作主要是在保持兼容性的同时完善和扩展这些现有代码。
到目前为止，我已经完成了以下工作：

增加了对读取和保存 ASS 字幕中嵌入字体的初始支持
优化了字幕样式的存储方法
从 V4Style 迁移到 V4+Style

尚待完成的任务：

修改 m_subtitleList 以容纳更多信息。
为每个功能编写单元测试

完成这些步骤后，我们将对 ASS 格式字幕提供更全面的支持，标志着 ASS 代码重构这一阶段的结束。下一步将重点重构修改字幕样式的功能。这两部分将是我接下来两周的重点。敬请期待！]]></description>
      <guid>https://seri037.github.io/blog/posts/development/2/?utm_source=atom_feed</guid>
      <pubDate>Thu, 13 Jun 2024 12:42:00 GMT</pubDate>
    </item>
    <item>
      <title>当开源不是：Floorp、FUTO......</title>
      <link>https://cukic.co/2024/06/13/open-source/index.html?utm_source=atom_feed</link>
      <description><![CDATA[最近我发现一个奇怪的事实——许多用户和开发人员不知道什么是开源。
前段时间，Floorp 网络浏览器（Firefox 的一个分支）转为闭源引起了争议。
原因是某家公司分叉了 Floorp，并基于它制作了一个浏览器。项目分叉的作者抱怨有人分叉了他的项目，这种讽刺意味我不愿评论。
显然，这在不少自由软件/开源软件爱好者聚集的平台上引发了一场负面反应风暴。
开发人员回应说，这只是暂时的，浏览器很快就会再次开源。过了一段时间，存储库
再次公开，一切都很好。
开发人员说Floorp 再次开源，愤怒的暴徒说很好，Floorp 浏览器再次开源。
关于 Floorp 的每次讨论都收到大量评论，人们
应该停止抱怨，Floorp 是开源的，而
之前的情况只是误会。
开源
开源一词在 opensource.org 上有很好的定义。
将程序的源代码公开可用并不足以
使某个程序成为开源程序。有一大群人说某样东西是开源的，这还不足以说明某样东西是开源的。
如果发布代码的许可证不符合 opensource.org 上发布的标准，则程序不是开源的。许可证中包含以下内容的程序，根据定义，不是开源的：

您不得以任何形式将本软件或任何衍生作品用于商业目的。商业用途的例子包括开展业务运营、许可、租赁或销售软件，或分发软件用于商业产品。
– Floorp private components/LICENSE

措辞很奇怪，因为看起来您无法使用 Floorp 网络浏览器访问工作电子邮件帐户等，因为那样会将其用于商业用途。这可能不是许可证作者的本意——许可证的意图是禁止通过分叉 Floorp 创建商业产品。
虽然作者不希望别人从他的作品中获利，但这正是 Floorp 网络浏览器不是开源的原因。
你可以称它为‘源代码可用’，你可以称它为‘公平代码’，但你不能不称它为开源。
重新定义开源
这篇博文应该在 Floorp 事件发生时写，但我认为这只是一个随机事件，不值得额外关注。
看来我错了。这是人们应该开始关注的事情。
很多人——无论是开发人员还是用户，有意还是无意地——滥用了“开源”一词，其中一些人，比如 FUTO，甚至走得更远，重新定义它并创建自己的不兼容的开源定义，以满足他们自己的目的。
开源混淆案例
现在，这篇文章的主要目的不是让我发泄一下，而是分享一个由 Dan Brown 发起的伟大项目，该项目试图找到并列出所有声称是开源但其许可证却不是这样规定的项目。
它可以在他的
Github 帐户。
与 FSFE 分享您的观点
Albert 指出，FSFE 也对此话题感兴趣：

FSFE 正在寻找有关openwashing的示例和想法
如果您愿意，我相信他们会欢迎您的意见mastodon.social/@johas/112524760073638652

]]></description>
      <guid>https://cukic.co/2024/06/13/open-source/index.html?utm_source=atom_feed</guid>
      <pubDate>Thu, 13 Jun 2024 12:30:00 GMT</pubDate>
    </item>
    <item>
      <title>KDE 齿轮 24.05.1</title>
      <link>https://kde.org/announcements/gear/24.05.1/?utm_source=atom_feed</link>
      <description><![CDATA[作为 KDE Gear 的一部分，超过 180 个独立程序以及数十个程序员库和功能插件同时发布。
今天，它们都获得了新的错误修复源版本和更新的翻译，包括：

elisa：修复 DBus 服务激活（提交，修复错误#487905）
kcalc：正确处理某些表达式（提交，修复错误 #487614)
kcolorpicker：允许使用 Wayland 选择屏幕颜色 (提交，修复错误 #479406)

发行版和应用商店打包者应更新其应用程序包。

24.05 发行说明，了解有关 tarball 和已知问题的信息。
软件包下载 wiki 页面
24.05.1 源信息页面
24.05.1 完整更新日志
]]></description>
      <guid>https://kde.org/announcements/gear/24.05.1/?utm_source=atom_feed</guid>
      <pubDate>Thu, 13 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>提供 git 树</title>
      <link>https://euroquis.nl//freebsd/2024/06/13/freebsd13_2.html?utm_source=atom_feed</link>
      <description><![CDATA[对于 FreeBSD 打包（编写所谓的“端口”），我通常
只是在我的主机系统上构建 - 无论是在实际主机中，还是使用
poudriere - 然后就结束了。如果它在 amd64 上编译，那么它应该
在任何地方都能工作，对吧？（毕竟，“全世界都是 VAX”）

顺便说一句，这里没有令人兴奋的软件工程，只是“这是我如何
设置一些基础设施来帮助我在各种环境中本地构建端口。”

我最近终于修复了 amd64 上我非常喜欢的音频播放器 Sayonara 的构建。但是，它在 i386 上仍然失败，
因为 GStreamer 整数大小和主机整数大小不匹配，
而 Sayonara 大小的代码假设它们是相同的。值得庆幸的是，如今 32 位代码很少被构建和测试，但它却不断向我发送构建失败的垃圾邮件。因此，我开始使用运行 FreeBSD 13.2 i386 的 i386 VM 来修复它。
我想要做的是使用主机上的端口树 - 它是上游 FreeBSD 端口树的 git 签出 - 并将其克隆到我的 VM 中。然后，我可以在主机上执行打包修复，在本地提交它们，在 VM 中更新签出，并在那里测试打包修复。我想将这些提交保留在本地，这样我就不会用大量“也许这有效”之类的提交污染全局上游存储库。一旦我完成了，我可以将其压缩为一个提交并推送，一劳永逸地修复构建（哈哈！）。
因此，为某个远程提供 git 签出。它非常简单（只要 StackOverflow
答案仍然显示在网络搜索中；为了防止将来被 enshittification，
这些注释是我自己复制的）：
ports$ git daemon --reuseaddr --base-path=. --export-all --verbose

在我的 ports/ 目录中，运行随附的简单且不安全的 git 服务器。
导出端口树。在接收端（即在 VM 中），使用 git:// 协议进行克隆。
# git clone git://host/ /usr/ports

瞧！这可以快速完成端口修复，而这些修复需要在与我通常进行端口树检查（以及我的 GPG 密钥等）的机器不同的机器上完成。]]></description>
      <guid>https://euroquis.nl//freebsd/2024/06/13/freebsd13_2.html?utm_source=atom_feed</guid>
      <pubDate>Wed, 12 Jun 2024 22:00:00 GMT</pubDate>
    </item>
    <item>
      <title>我的 GSoC 中的最后两周</title>
      <link>https://alcarazzam.dev/posts/the-last-2-weeks-in-gsoc/?utm_source=atom_feed</link>
      <description><![CDATA[我们已经进入了 Google Summer of Code 编码阶段的第三周！提醒一下，我正在为一些 KDE 框架添加 Python 支持。在前两周，我添加了对 KWidgetsAddons 的支持，现在几乎完成了，除了两个小部件，它们的绑定没有正确生成并且无法编译。
我还编写了（在我的导师 Carl 的帮助下）构建库所需的 CMake 代码。这部分可能（希望）会在 extra-cmake-modules 中结束，以便任何人都可以轻松使用它。计划最终将每个绑定提交到他们的存储库，以便更容易使 C++ 库与它们的 Python 绑定保持同步。
本周我将为 KWidgetAddons 添加一些示例，因为它现在处于可用状态。如果您想了解进展如何，可以查看代码。]]></description>
      <guid>https://alcarazzam.dev/posts/the-last-2-weeks-in-gsoc/?utm_source=atom_feed</guid>
      <pubDate>Tue, 11 Jun 2024 15:30:00 GMT</pubDate>
    </item>
    <item>
      <title>macOS 15 Sequoia 上的 Qt</title>
      <link>https://www.qt.io/blog/qt-on-macos-15-sequoia?utm_source=atom_feed</link>
      <description><![CDATA[
  

按照惯例，Apple 昨天在 WWDC 上发布了其最新的操作系统版本，其中包括 macOS 15 Sequoia，以内华达山脉国家公园命名。
]]></description>
      <guid>https://www.qt.io/blog/qt-on-macos-15-sequoia?utm_source=atom_feed</guid>
      <pubDate>Tue, 11 Jun 2024 13:19:06 GMT</pubDate>
    </item>
    <item>
      <title>Plasma 浏览器集成 1.9.1</title>
      <link>https://blog.broulik.de/2024/06/plasma-browser-integration-1-9-1/?utm_source=atom_feed</link>
      <description><![CDATA[我很高兴地宣布，Plasma Browser Integration 1.9.1 版现已在 Firefox Web Store 上发布。这是 Firefox 版本的 1.9 版，早在 2023 年 11 月就发布了。我们不确定它是如何卡在附加组件审核中的，我们也没有意识到这一点，但无论原因是什么，它现在都发布了！这是一个维护版本，其中包含一些重要更改以及常规的翻译更新。当然，Plasma 6 完全支持该扩展！
Konqi 正在浏览万维网
Plasma 浏览器集成弥合了浏览器和 Plasma 桌面 之间的差距。它允许您共享链接、在 KRunner 中查找浏览器选项卡和访问过的网站、在通知中心监控下载进度，以及随时在 Plasma 中控制音乐和视频播放，甚至可以使用 KDE Con​​nect 从手机控制音乐和视频播放！

下一个版本可能是移植到 Manifest v3 的 2.0 版本，因为 Chrome 将继续推出强制执行新清单版本。我们仍在尝试寻找一种方法来保持统一的代码库以支持 Firefox 和 Chrome。例如，Chrome 现在需要服务工作者来扩展，而 Firefox 继续仅支持后台页面。不过，最近的 Firefox 和 Chrome 版本似乎支持彼此的清单属性，因此我们有信心在不引入特定于浏览器的 git 分支的情况下完成这项工作。
有什么新东西？
如果您是 Firefox 用户，请查看上一版本公告，了解有关新功能的更多详细信息：

重新编写页面注入代码（例如修复 Spotify）
远离已弃用的 InstallTrigger
“共享...”菜单现在也在选项卡上下文菜单中
选项卡运行器仅查询“正常”窗口（无应用程序）
历史记录运行器跳过“blob” URL
在向本机消息主机发送消息之前对其进行检查（修复不受支持的平台（例如 Windows）上令人讨厌的控制台警告）
更漂亮的控制台调试输出
性能和资源使用改进

（另请参阅我们社区 Wiki 上的变更日志页面）]]></description>
      <guid>https://blog.broulik.de/2024/06/plasma-browser-integration-1-9-1/?utm_source=atom_feed</guid>
      <pubDate>Tue, 11 Jun 2024 10:35:20 GMT</pubDate>
    </item>
    <item>
      <title>Konsole 布局自动化（第 1 部分）</title>
      <link>https://blogs.kde.org/2024/06/11/konsole-layout-automation-part-1/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://blogs.kde.org/2024/06/11/konsole-layout-automation-part-1/?utm_source=atom_feed</guid>
      <pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>切换到 GNU/Linux：精神上</title>
      <link>https://nathanupchurch.com/blog/switching-to-gnu-linux-mentally/?utm_source=atom_feed</link>
      <description><![CDATA[]]></description>
      <guid>https://nathanupchurch.com/blog/switching-to-gnu-linux-mentally/?utm_source=atom_feed</guid>
      <pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    </channel>
</rss>